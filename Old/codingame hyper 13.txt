using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;

class Player
{
    static Cell[,] gridC;
    static int width;
    static int height;
   
    static List<Entity> BombList = new List<Entity>();
    static List<Entity> ItemList = new List<Entity>();
    static List<Entity> GamerList = new List<Entity>();

    struct NewPlayer
    {        
        public NewPlayer(int x, int y, int bombs, int range)
        {
            coord.X = x;
            coord.Y = y;
            explosionRange = range;
            bombsLeft = bombs;
            canPutBombs = bombs > 0; 
            Destination = new Coord(x,y);
            LastBomb = 0;
        }

        public Coord coord;
        public int explosionRange;
        public bool canPutBombs;
        public int bombsLeft;
        public Coord Destination;   
        public int LastBomb;    
    }

    class Entity
    {
        public Entity(string line)
        {
            string[] inputs = line.Split(' ');
            entityType = int.Parse(inputs[0]);
            owner = int.Parse(inputs[1]);
            x = int.Parse(inputs[2]);
            y = int.Parse(inputs[3]);
            param1 = int.Parse(inputs[4]);
            param2 = int.Parse(inputs[5]);
        }

        public Entity(Entity clone)
        {
            entityType = clone.entityType;
            owner = clone.owner;
            x = clone.x;
            y = clone.y;
            param1 = clone.param1;
            param2 = clone.param2;
        }

        public Entity(int X, int Y, int Range, int Time)
        {
            entityType = 1;
            owner = 0;
            x = X;
            y = Y;
            param1 = Time;
            param2 = Range;
        }
       
        public int entityType;
        public int owner;
        public int x;
        public int y;              
        public int param1 {get; set;}
        public int param2 {get; set;} 
    }

    struct Cell
    {
       public char type;
       public int access;
       public int safe;
       public int boxCount;
    }

    struct Coord
    {
        public Coord(int x, int y) { X = x; Y = y; }
        public bool Equals(Coord coord2) => this.X == coord2.X && this.Y == coord2.Y;       
        public int X;
        public int Y;
    }

    static bool UnderFire(int X, int Y)
    {
        bool result =false;        
        foreach (Entity bomb in BombList)
        {           
            int range = bomb.param2;                                    
            if ((bomb.x == X && Math.Abs(bomb.y - Y) < range && NoObstaclesX(bomb.x, bomb.y, Y)) ||
                (bomb.y == Y && Math.Abs(bomb.x - X) < range && NoObstaclesY(bomb.y, bomb.x, X))) result = true;                                      
        }                   
        return result;
    }

    static bool NoObstaclesX(int X, int Y1, int Y2)
    {
        bool result = true;
        string allowed = "X0123456789";
        for (int i = Math.Min(Y1, Y2) + 1; i < Math.Max(Y1, Y2); i++)
        {
           foreach (Entity item in ItemList) if (item.x == X && item.y == i) result = false;               
           if (allowed.Contains(gridC[X, i].type)) result = false;
        }
        return result;
    }

    static bool NoObstaclesY(int Y, int X1, int X2)
    {
        bool result = true;
        string allowed = "X0123456789";
        for (int i = Math.Min(X1, X2) + 1; i < Math.Max(X1, X2); i++)
        {
            foreach (Entity item in ItemList) if (item.x == i && item.y == Y) result = false;
            if (allowed.Contains(gridC[i, Y].type)) result = false;
        }
        return result;
    }

    static void OrganizeAccessLevels(int X, int Y)
    {
        
        for (int j = 0; j < height; j++)
        { 
            for (int i = 0; i < width; i++) 
            {
                gridC[i,j].access = 100;  
            }   
        }             
        gridC[X,Y].access = 0;  
        for (int s = 1; s <= 15; s++)
        {
            for (int j = 0; j < height; j++)
            {
                for (int i = 0; i < width; i++) 
                {
                    if (gridC[i,j].access == s-1)
                    {
                        if (i-1 >= 0) if (gridC[i-1, j].access == 100 && (gridC[i-1, j].type == '.')) gridC[i-1, j].access = s;
                        if (j-1 >= 0) if (gridC[i, j-1].access == 100 && (gridC[i, j-1].type == '.')) gridC[i, j-1].access = s;
                        if (i+1 < width) if (gridC[i+1, j].access == 100 && (gridC[i+1, j].type == '.')) gridC[i+1, j].access = s;
                        if (j+1 < height) if (gridC[i, j+1].access == 100 && (gridC[i, j+1].type == '.')) gridC[i, j+1].access = s;
                    } 
                }
            }
        }   
    }

    static void OrganizeSafetyLevels()
    {
        for (int b = 0; b < BombList.Count(); b++)
        {
            int range1 = BombList[b].param2;                    
            int time1 = BombList[b].param1;
            int x1 = BombList[b].x;
            int y1 = BombList[b].y;
            for (int b2 = 0; b2 < BombList.Count(); b2++) 
            {
                if (b2 != b)
                {
                    int range2 = BombList[b2].param2;
                    int time2 = BombList[b2].param1;
                    int x2 = BombList[b2].x;
                    int y2 = BombList[b2].y;
                    if (time1 > time2)
                    {                   
                        if (x1 == x2 && Math.Abs(y2 - y1) < range2 && NoObstaclesX(x1, y1, y2))
                        { 
                            BombList[b].param1 = time2; 
                            time1 = time2; 
                        }
                        if (y1 == y2 && Math.Abs(x2 - x1) < range2 && NoObstaclesY(y1, x1, x2))
                        { 
                            BombList[b].param1 = time2; 
                            time1 = time2;
                        }                   
                    }                                      
                    if (time1 < time2)
                    {                   
                        if (x1 == x2 && Math.Abs(y2 - y1) < range1 && NoObstaclesX(x1, y1, y2)) 
                        {
                            BombList[b2].param1 = time1; 
                        }
                        if (y1 == y2 && Math.Abs(x2 - x1) < range1 && NoObstaclesY(y1, x1, x2))
                        {
                            BombList[b2].param1 = time1;
                        }                     
                    }               
                }
            }                                           
        }
        for (int j = 0; j < height; j++)
        {
            for (int i = 0; i < width; i++)
            {
                int result = 20;
                foreach (Entity bomb in BombList)
                {           
                    int range = bomb.param2;                    
                    int time = bomb.param1;
                    if (time < result)
                    {
                        if ((bomb.x == i && Math.Abs(bomb.y - j) < range && NoObstaclesX(bomb.x, bomb.y, j)) ||
                            (bomb.y == j && Math.Abs(bomb.x - i) < range && NoObstaclesY(bomb.y, bomb.x, i)) ||
                            (bomb.x == i && bomb.y == j)) result = time; 
                    }                        
                }                
                gridC[i,j].safe = result;             
            } 
        }   
    }

    static void OrganizeBoxCountLevels(int explosionRange)
    {
        for (int j = 0; j < height; j++)
        {
            for (int i = 0; i < width; i++)
            {
                gridC[i,j].boxCount = BoxCountC(i, j, explosionRange);
            }
        }
    }

    static void OrganizeCellGrid(int X, int Y, int explosionRange)
    {
        OrganizeAccessLevels(X, Y);
        OrganizeSafetyLevels();
        OrganizeBoxCountLevels(explosionRange);        
    }

    static int TotalBoxCount()
    {
        int result = 0;   
        for (int j = 0; j < height; j++) for (int i = 0; i < width; i++) 
        if (gridC[i, j].type != '.' && gridC[i, j].type != 'b' && gridC[i, j].type != 'X') 
        if (!UnderFire(i, j)) result++;       
        return result;
    }  

    static int BoxCountC(int X, int Y, int explosionRange)
    {
        int result = 0;      
        if (gridC[X, Y].type == '.')
        {
            bool lineBlocked =false;
            for (int i = 1; i< explosionRange; i++)
            {                                  
                if (X - i >= 0)
                {
                    if (gridC[X - i, Y].type == 'X' || gridC[X - i, Y].type == 'b') lineBlocked = true;
                    foreach (Entity item in ItemList) if (item.x == X - i && item.y == Y) lineBlocked = true; 
                    if (!lineBlocked) if (gridC[X - i, Y].type !='.') {if (!UnderFire(X-i,Y)) result++; lineBlocked = true;}
                    if (lineBlocked) break;
                }
            }
            lineBlocked =false;
            for (int i = 1; i< explosionRange; i++)                    
                if (Y - i >= 0)
                {
                    if (gridC[X, Y - i].type =='X' || gridC[X, Y - i].type == 'b') lineBlocked = true;
                    foreach (Entity item in ItemList) if (item.x == X && item.y == Y - i) lineBlocked = true; 
                    if (!lineBlocked) if (gridC[X, Y-i].type !='.') {if (!UnderFire(X,Y-i)) result++; lineBlocked = true;}
                    if (lineBlocked) break;
                }
            lineBlocked =false;
            for (int i = 1; i< explosionRange; i++)                    
                if (X + i < width)
                {
                    if (gridC[X + i, Y].type =='X' || gridC[X + i, Y].type == 'b') lineBlocked = true;
                    foreach (Entity item in ItemList) if (item.x == X + i && item.y == Y) lineBlocked = true; 
                    if (!lineBlocked) if (gridC[X+i, Y].type !='.') {if (!UnderFire(X+i,Y)) result++; lineBlocked = true;}
                    if (lineBlocked) break;
                }
            lineBlocked =false;
            for (int i = 1; i< explosionRange; i++)                    
                if (Y + i < height)
                {
                    if (gridC[X, Y + i].type =='X' || gridC[X, Y + i].type == 'b') lineBlocked = true;
                    foreach (Entity item in ItemList) if (item.x == X && item.y == Y + i) lineBlocked = true; 
                    if (!lineBlocked) if (gridC[X, Y+i].type !='.') {if (!UnderFire(X,Y+i))result++; lineBlocked = true;}
                    if (lineBlocked) break;
                }
        }        
        return result;
    }    

    static Coord FindShelterC(int X, int Y, int radius, int minimumSafety)
    {
        int bestSafety = 0;
        Coord result = new Coord(X,Y);       
        for (int i = X - radius; i <= X + radius; i++)
        for (int j = Y - radius; j <= Y + radius; j++)
        {
            if (i>=0 && j>=0 && i<width && j<height)
            if (gridC[i,j].safe >= minimumSafety && gridC[i,j].access <= radius) 
            {
                if (gridC[i,j].safe > bestSafety)
                { 
                    result.X=i; 
                    result.Y=j; 
                    bestSafety = gridC[i,j].safe;
                } 
                if (gridC[i,j].safe == bestSafety)
                {
                    if (gridC[i,j].boxCount > gridC[result.X, result.Y].boxCount ||
                       (gridC[i,j].boxCount == gridC[result.X, result.Y].boxCount && 
                       Distance(result, new Coord(X,Y)) > Distance(new Coord(i,j), new Coord(X,Y))))
                    {                  
                        result.X=i; 
                        result.Y=j;
                    }    
                }
            }                               
        }
        return result;
    }

    static Coord ClosestEntity(int X, int Y, int entityType, Entity[] entityList, int count)
    {
        Coord result = new Coord(20,20);
        for (int i=0; i< count; i++)
        {
            if (entityList[i].entityType == entityType)
            {
                if (Math.Abs(entityList[i].x - X) + Math.Abs(entityList[i].y - Y) < Math.Abs(result.X - X) + Math.Abs(result.Y - Y) && gridC[entityList[i].x, entityList[i].y].access < 5)
                {
                    result.X = entityList[i].x;
                    result.Y = entityList[i].y;
                }
            }
        }      
        return result;
    }

    static int Safe(int X, int Y)
    {
        int result = 20;
        if (X >= 0 && Y >= 0 && X < width && Y < height) result = gridC[X,Y].safe;
        return result;
    }

    static int Distance(Coord coord1, Coord coord2)
    {
        return Math.Abs(coord1.X - coord2.X) + Math.Abs(coord1.Y - coord2.Y);
    }

    static void SetDestination(NewPlayer player, Coord destination, string addition)
    {
        player.Destination = destination;
        Console.WriteLine($"MOVE {destination.X} {destination.Y}" + addition);       
    }

    static Coord TheRichestBoxSpotC(Coord P, int maxStep)
    {
        int maximumBoxCount = 0; 
          
        Coord result = new Coord(0,0);       
        for (int i = 0; i < width; i++)
            for (int j = 0; j < height; j++)       
            {
                if (Math.Abs(P.X - i) <= maxStep && Math.Abs(P.Y - j) <= maxStep)                    
                    if (gridC[i,j].access <= maxStep)
                    {
                        int currentBoxCount = gridC[i,j].boxCount;
                        if ((i==0 && j==0)||(i==0 && j==height-1)||(i==width-1 && j==0)||(i==width-1 && j==height-1))currentBoxCount =0;
                        if (currentBoxCount > maximumBoxCount)
                        {
                            maximumBoxCount = currentBoxCount;
                            result.X = i;
                            result.Y = j;
                        }    
                        else if (currentBoxCount == maximumBoxCount) 
                        {
                            if (Distance(P, new Coord(i,j)) < Distance(P,result))
                            {
                                result.X = i;
                                result.Y = j;
                            }
                        }               
                    }
            }           
        //if (maximumBoxCount == 0) result = TheRichestBoxSpotC(P, 0, 15); 
        //if (ma)      
        return result;
    }

    static void Main(string[] args)
    {
        string[] inputs;
        inputs = Console.ReadLine().Split(' ');
        width = int.Parse(inputs[0]);
        height = int.Parse(inputs[1]);
        int myId = int.Parse(inputs[2]);
        gridC = new Cell[width, height];
        NewPlayer MyPlayer = new NewPlayer(0,0,1,2);
        int X = 0, Y = 0;

        while (true)
        {
            for (int j = 0; j < height; j++)
            {
                string row = Console.ReadLine();
                for (int i = 0; i < width; i++) gridC[i,j].type = row[i];                 
            }
            int newEntityId=0;          
            int entities = int.Parse(Console.ReadLine());
            Entity[] entityList = new Entity[entities];
            ItemList.Clear();
            BombList.Clear(); 
            GamerList.Clear();

            for (int i = 0; i < entities; i++)
            {              
                entityList[i] = new Entity(Console.ReadLine());
                
                if (entityList[i].entityType == 0)
                { 
                    GamerList.Add(entityList[i]);
                }
                if (entityList[i].entityType == 2)
                { 
                    ItemList.Add(entityList[i]);
                }
                if (entityList[i].entityType == 1)
                { 
                    gridC[entityList[i].x,entityList[i].y].type='b';
                    BombList.Add(entityList[i]);
                }
                if (entityList[i].entityType == 0 && entityList[i].owner == myId)  
                {                  
                    newEntityId =i;
                    X = entityList[i].x;
                    Y = entityList[i].y;                 
                    MyPlayer.coord.X = X;
                    MyPlayer.coord.Y = Y; 
                    MyPlayer.bombsLeft = entityList[i].param1;
                    MyPlayer.explosionRange = entityList[i].param2;
                    MyPlayer.LastBomb++;                
                }
            }
            OrganizeCellGrid(X, Y, MyPlayer.explosionRange); 

            Coord shelter = new Coord(0,0);
            bool CanPutBombNow = gridC[X, Y].type != 'b' && MyPlayer.bombsLeft > 0;
            if (CanPutBombNow)
            {
                List<Entity> TempBombList = new List<Entity>(BombList.Count); 
                BombList.ForEach((bomb) => { TempBombList.Add(new Entity(bomb)); });           
                BombList.Add(new Entity(X, Y, MyPlayer.explosionRange, 7));
                OrganizeCellGrid(X, Y, MyPlayer.explosionRange);               
                shelter = FindShelterC(X, Y, 5, 10);  
                CanPutBombNow = !MyPlayer.coord.Equals(shelter);                
                BombList.Clear();
                BombList = new List<Entity>(TempBombList.Count); 
                TempBombList.ForEach((bomb) => { BombList.Add(new Entity(bomb)); });   
                OrganizeCellGrid(X, Y, MyPlayer.explosionRange);
            }                                                       

            if (Safe(X, Y) <= 2)
            {                             
                shelter = FindShelterC(X, Y, 1, 3);  
                Console.WriteLine($"MOVE {shelter.X} {shelter.Y} Not SAFE RUN 1");
            } 
            else if (Safe(X+1,Y) <= 2 || Safe(X-1,Y) <= 2 || Safe(X,Y+1) <= 2 || Safe(X,Y-1) <= 2)
            {
                if (Safe(X, Y) <= 3)
                { 
                    shelter = FindShelterC(X, Y, 2, 4);                             
                    Console.WriteLine($"MOVE {shelter.X} {shelter.Y}  Not SAFE Around RUN 2");
                }
                else
                {
                    Console.WriteLine($"MOVE {X} {Y} Not SAFE Around! Stay");
                } 
            }
            else if (Safe(X, Y) <= 3)
            {             
                SetDestination(MyPlayer, FindShelterC(X, Y, 2, 4), " shelter 3");
            } 
            else if (Safe(X, Y) <= 4)
            {             
                SetDestination(MyPlayer, FindShelterC(X, Y, 3, 5), " shelter 4");
            }   
            else 
            {
                Coord closestItem = ClosestEntity(X, Y, 2, entityList, entities);
                if (BoxCountC(X, Y, MyPlayer.explosionRange) > 2 && CanPutBombNow )
                {                                   
                     
                     Console.WriteLine($"BOMB {shelter.X} {shelter.Y} BOMB 3 RUN AWAY, guys"); MyPlayer.LastBomb = 0;                                                            
                }  
                else if (MyPlayer.bombsLeft < 6 && Distance(MyPlayer.coord, closestItem) <= 1 && gridC[closestItem.X,closestItem.Y].safe > 4)
                {
                    Console.WriteLine($"MOVE {closestItem.X} {closestItem.Y} Item 1! Wow Nice!  {gridC[closestItem.X,closestItem.Y].safe}");  
                }              
                else if (MyPlayer.bombsLeft < 6 && Distance(MyPlayer.coord, closestItem) <= 2 && gridC[closestItem.X,closestItem.Y].safe > 5)
                {
                    Console.WriteLine($"MOVE {closestItem.X} {closestItem.Y} Item 2! Wow Nice!  {gridC[closestItem.X,closestItem.Y].safe}");  
                }
                else if (BoxCountC(X, Y, MyPlayer.explosionRange) > 1 && CanPutBombNow)
                {                                   
                     
                     Console.WriteLine($"BOMB {shelter.X} {shelter.Y} BOMB 2 RUN AWAY, guys "); MyPlayer.LastBomb = 0;                                                            
                }
                else if (MyPlayer.bombsLeft < 6 && Distance(MyPlayer.coord, closestItem) <= 3  && gridC[closestItem.X,closestItem.Y].safe > 6)
                {
                    if (CanPutBombNow && gridC[X,Y].boxCount > 0 && gridC[closestItem.X,closestItem.Y].safe > 6 && closestItem.X != X && closestItem.Y != Y)
                    {
                        Console.WriteLine($"BOMB {closestItem.X} {closestItem.Y} BOMB! Wow Item, guys! Nice!");
                        MyPlayer.LastBomb = 0; 
                    }
                    else SetDestination(MyPlayer, closestItem, " item 3 move");  
                }                
                else if (BoxCountC(X, Y, MyPlayer.explosionRange) > 0 && CanPutBombNow)
                {
                    if (MyPlayer.Destination.Equals(MyPlayer.coord) || (MyPlayer.bombsLeft > 1 && MyPlayer.LastBomb > 1) || MyPlayer.LastBomb > 3 ) 
                    {
                       
                        Console.WriteLine($"BOMB {shelter.X} {shelter.Y} BOMB 1 RUN AWAY, guys"); MyPlayer.LastBomb = 0;                                  
                    } 
                    else SetDestination(MyPlayer, MyPlayer.Destination, " just MOVE ");           
                }                   
                else if (MyPlayer.bombsLeft < 6 && Distance(MyPlayer.coord, closestItem) <= 4  && gridC[closestItem.X,closestItem.Y].safe > 7)
                {
                    SetDestination(MyPlayer, closestItem, " item 4 move");  
                }   
                else if (TotalBoxCount() == 0)// && CanPutBombNow && MyPlayer.LastBomb > 4)
                {                                                       
                    Console.WriteLine($"MOVE {6} {6} FINISH BURN IT ALL!"); MyPlayer.LastBomb = 0;                                                            
                }             
                else if (!MyPlayer.Destination.Equals(MyPlayer.coord))
                {
                    if (MyPlayer.coord.Equals(new Coord(0, 0)))
                    {
                        SetDestination(MyPlayer, MyPlayer.Destination, " just MOVE ");
                    }
                    else  SetDestination(MyPlayer, TheRichestBoxSpotC(MyPlayer.coord, 15), " rich 15 MOVE ");
                }             
                else
                {
                    SetDestination(MyPlayer, TheRichestBoxSpotC(MyPlayer.coord, 9), " rich 15 MOVE ");  
                } 
            }
        }
    }
}